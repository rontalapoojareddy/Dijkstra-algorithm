// Dijkstra's Single Source Shortest Path Algorithm in C
// Name: R. Pooja Reddy
// Roll No: 2503B05130

#include <stdio.h>
#include <limits.h>
#include <stdbool.h>

#define V 5

int minDistance(int dist[], bool sptSet[]) {
    int min = INT_MAX, min_index;

    for (int v = 0; v < V; v++)
        if (sptSet[v] == false && dist[v] <= min)
            min = dist[v], min_index = v;

    return min_index;
}

void printSolution(int dist[], int src) {
    printf("Shortest distances from source vertex %d:\n", src);
    for (int i = 0; i < V; i++)
        printf("Vertex %d : %d\n", i, dist[i]);
}

void dijkstra(int graph[V][V], int src) {
    int dist[V];
    bool sptSet[V];

    for (int i = 0; i < V; i++)
        dist[i] = INT_MAX, sptSet[i] = false;

    dist[src] = 0;

    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, sptSet);
        sptSet[u] = true;

        for (int v = 0; v < V; v++)
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX
                && dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
    }

    printSolution(dist, src);
}

int main() {
    int graph[V][V] = {
        {0, 7, 4, 0, 0},
        {7, 0, 0, 6, 0},
        {4, 0, 0, 5, 0},
        {0, 6, 5, 0, 2},
        {0, 0, 0, 2, 0}
    };

    int src = 0;
    dijkstra(graph, src);
    return 0;
}
